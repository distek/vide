#!/bin/bash

if [ -z $TMUX ] || [ $TMUX = "" ]; then
    echo "subshells and other non-sense make this a pain in the ass, start tmux first"
    exit 1
fi

session=0

for s in $(ls -1 /tmp/videsock* 2>/dev/null); do
    let session++
done

VIDESOCK="/tmp/videsock$session"
doProject=false

printUsage() {
    echo "Usage:
$0 [-h] [-p|--project [project name]]
    -h --help                       print this help
    -p --project [project name]     create or use project [project name]
"
}

# Parse arguments
args=("$@")

argLen=${#args[@]}

for (( i=0; i < $argLen; i++ )); do
    case ${args[$i]} in
        -h|--help)
            printUsage
            exit 0
            ;;
        -p|--project)
            doProject=true
            project=$(projects select)

            # just in case user exits fzf without selecting a project
            if [ -z $project ]; then
                echo "Project not chosen, exiting."   
                exit 1
            fi
            ;;
        *)
            echo "Unknown arg: ${args[$i]}"
            printUsage
            exit 1
            ;;
    esac
done

if ! $doProject; then
    project=$(pwd)
fi

cd $project

firstWidth=$((($(tput cols) - 30) / 2))

tmux send-keys -t 0 " cd $project; NNN_OPTS='cHRD' NNN_OPENER='nvim --server "$VIDESOCK" --remote' nnn -Tv" ENTER

tmux set-hook -g client-resized 'run-shell ~/git-clones/vide/scripts/resize.sh'

tmux split-window -h " export VIDESOCK=$VIDESOCK; nvim --listen $VIDESOCK; for i in 0 2 3; do tmux kill-pane -t \$i; done"

tmux \
    split-window -v " export VIDESOCK=$VIDESOCK; zsh" \; \
    split-window -h " export VIDESOCK=$VIDESOCK; zsh" \;

height=$(echo "$(tmux display-message -p "#{window_height}") * 0.20" | bc | cut -d'.' -f1)

tmux \
    resize-pane -t 0 -x 30 \; \
    resize-pane -t 2 -y $height \; \
    resize-pane -t 2 -x $firstWidth \; \
    select-pane -t 1 \; \
    rename-window $(basename $PWD) \;

sleep 1

kill -SIGWINCH $(pgrep nvim)
